@page "/admin/products/edit/{id:long}"
@page "/admin/products/create"
@using System.IO
@inject IWebHostEnvironment env

@inherits OwningComponentBase<IStoreRepository>
<style>
    div.validation-message {
        color: rgb(220, 53, 69);
        font-weight: 500
    }
</style>
<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Product</h3>
<EditForm Model="Product" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator />
    @if (Product.ProductID != 0)
    {
        <div class="form-group">
            <label>ID</label>
            <input class="form-control" disabled value="@Product.ProductID" />
        </div>
    }
    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => Product.Name)" />
        <InputText class="form-control" @bind-Value="Product.Name" />
    </div>
    <div class="form-group">
        <label>Description</label>
        <ValidationMessage For="@(() => Product.Description)" />
        <InputText class="form-control" @bind-Value="Product.Description" />
    </div>
    <div class="form-group">
        <label>Category</label>
        <ValidationMessage For="@(() => Product.Category)" />
        <InputText class="form-control" @bind-Value="Product.Category" />
    </div>
    <div class="form-group">
        <label>Price</label>
        <ValidationMessage For="@(() => Product.Price)" />
        <InputNumber class="form-control" @bind-Value="Product.Price" />
    </div>
    <div class="form-group">
        <label>Image</label>
        <InputFile class="form-control" OnChange="OnInputFileChange" multiple/>
    </div>

    <div class="mt-2">
        <button type="submit" class="btn btn-@ThemeColor">Save</button>
        <NavLink class="btn btn-secondary" href="/admin/products">Cancel</NavLink>
    </div>
</EditForm>
@code {
    public IStoreRepository Repository => Service;
    [Inject]
    public NavigationManager? NavManager { get; set; }
    [Parameter]
    public long Id { get; set; } = 0;
    public Product Product { get; set; } = new Product();
    IReadOnlyList<IBrowserFile>? selectedFiles;
    protected override void OnParametersSet()
    {
        if (Id != 0)
        {
            Product = Repository.Products.FirstOrDefault(p => p.ProductID == Id)
            ?? new();
        }
    }
    public async void SaveProduct()
    {
        string fileName = String.Empty;
        foreach (var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream();
            var path = $"{env.WebRootPath}\\img\\{file.Name}";
            fileName = $"img\\{file.Name}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
        }
        this.StateHasChanged();

        if (Id == 0)
        {
            Product.Image = fileName;
            Repository.CreateProduct(Product);
        }
        else
        {
            Product.Image = fileName;
            Repository.SaveProduct(Product);
        }

        NavManager?.NavigateTo("/admin/products");
    }
    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string TitleText => Id == 0 ? "Create" : "Edit";

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
    }
}